set nocompatible
filetype plugin on
syntax on
filetype plugin indent on
let mapleader=","
set mouse=a
set nowrap

" Treat all numerals as decimal even if zero padded
set nrformats=

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" Hide buffers instead of closing them
set hidden

" Show line numbers
set number

" Highlight search terms
set hlsearch

" Show search matches as you type
set incsearch

" Don't use old ways of protecting against data loss
set nobackup
set noswapfile

set pastetoggle=<leader>p

execute pathogen#infect()

" Set indentation preferences
"   ts='number of spaces that <Tab> in file uses'
"   sts='number of spaces that <Tab> uses while editing'
"   sw='number of spaces to use for (auto)indent step'
" for details see: vimdoc.sourceforge.net/htmldoc/quickref.html#option-list
set expandtab
set ts=4 sw=4
autocmd Filetype html setlocal ts=2 sts=2 sw=2
autocmd Filetype ruby setlocal ts=2 sts=2 sw=2
autocmd Filetype python setlocal ts=4 sts=4 sw=4
autocmd Filetype sh setlocal ts=4 sts=4 sw=4


" Show column rulers
set colorcolumn=72,80
highlight ColorColumn ctermbg=darkgray guibg=darkgray


" Show whitespace
set list
set listchars=eol:Â¬,tab:>>,trail:.,extends:>,precedes:<


" vim-flake8
" Run flake8 when saving a python file
autocmd BufWritePost *.py call Flake8()


" NERDTree settings
" map <C-n> :NERDTreeToggle<CR>
nmap <silent> <leader>nt :NERDTree<CR>
let NERDTreeIgnore=['\.pyc$']

" Might as well set the built in Explorer too
let g:netrw_liststyle=3


" Remove trailing whitespace for certain filetypes
fun! <SID>StripTrailingWhitespaces()
    let l=line(".")
    let c=col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun

autocmd FileType c,cpp,java,php,ruby,python,sh,vim autocmd BufWritePre
        \ <buffer> :call <SID>StripTrailingWhitespaces()


" Disable arrow keys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>


" Setting for ctrlp plugin
let g:ctrlp_map='<c-p>'
let g:ctrlp_max_files=0
let g:ctrlp_max_depth=40
let g:ctrlp_cmd='CtrlP'
let g:ctrlp_working_path_mode=''
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc
set wildignore+=.DS_Store
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe

let g:ctrlp_custom_ignore={
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'coverage':  '\v(htmlcov|\.?coverage)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ }


" Set up ag.vim
" Always start searching from the project root dir
let g:ag_working_path_mode="r"
nmap <leader>ag :Ag<SPACE>

" Override grep to use Ag instead

if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" bind K to grep word under cursor
nnoremap K yiw:Ag<SPACE><C-R>0<CR>
